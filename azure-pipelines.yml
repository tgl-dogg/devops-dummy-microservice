# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- '*'

pool:
  vmImage: ubuntu-latest

variables:
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
- task: Cache@2
  displayName: Configure Gradle Caching
  inputs:
    key: 'gradle | "$(Agent.OS)" | **/build.gradle' # Swap build.gradle.kts for build.gradle when using Groovy
    restoreKeys: |
      gradle | "$(Agent.OS)"
      gradle
    path: $(GRADLE_USER_HOME)

- task: Gradle@2
  displayName: 'Gradle Build'
  inputs:
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    #codeCoverageToolOption: JaCoCo
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'
    options: '--build-cache'

- script: |
    # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
    ./gradlew --stop
  displayName: 'Stop Gradle Daemon'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish JaCoCo Test Reports'
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '**/reports/jacoco/test/jacocoTestReport.xml'
    reportDirectory: '**/reports/jacoco/test/html'
    failIfCoverageEmpty: true

#- task: Gradle@2
#  displayName: 'Gradle DockerPush'
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'dockerPush'
#    publishJUnitResults: false
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: false
#    spotBugsAnalysis: 
    
- task: ArtifactoryGradle@1
  inputs:
    gradleBuildFile: 'build.gradle'
    tasks: 'dockerPush'
    artifactoryResolverService: 'JFrog Artifactory Connection'
    sourceRepo: 'deathinitive-docker'
    artifactoryDeployerService: 'JFrog Artifactory Connection'
    targetRepo: 'deathinitive-docker'
    deployMavenDesc: false
    deployIvyDesc: false